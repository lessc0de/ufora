/***************************************************************************
    Copyright 2016 Ufora Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
****************************************************************************/

#include "PythonBinaryStreamFromImplval.hppml"
#include "../../../core/Logging.hpp"
#include "../../../core/cppml/ExtractAllObjectsMatchingPredicate.hppml"
#include "../../Language/RebindFreeMemberAccesses.hppml"
#include "../../Language/RebindFree.hppml"
#include "../../Language/ExpressionLocationTagging.hppml"
#include "../../Core/ClassMediator.hppml"
#include "../../Language/ClassMediatorBindings.hppml"
#include "../../Core/MemoryPool.hpp"
#include "../../TypedFora/ABI/ImplValVisitor.hppml"
#include "../../TypedFora/ABI/ContainsNonemptyVectorsVisitor.hppml"
#include "PythonBinaryStreamCommon.hppml"

using namespace TypedFora::Abi;

namespace Fora {

PythonBinaryStreamFromImplval::PythonBinaryStreamFromImplval(
            PolymorphicSharedPtr<VectorDataManager> inVDM,
            ImplValContainer inPyforaBuiltins,
            PolymorphicSharedPtr<PythonConstantConverter> inConstantConverter,
            PolymorphicSharedPtr<PythonListConverter> inPyListConverter,
            PolymorphicSharedPtr<PythonTupleConverter> inPyTupleConverter,
            PolymorphicSharedPtr<PythonDictConverter> inPyDictConverter,
            PolymorphicSharedPtr<PyforaSingletonAndExceptionConverter> inSingletonAndExceptionConverter
            ) :
        mVDM(inVDM),
        mPyforaBuiltins(inPyforaBuiltins),
        mConstantConverter(inConstantConverter),
        mListConverter(inPyListConverter),
        mTupleConverter(inPyTupleConverter),
        mDictConverter(inPyDictConverter),
        mSingletonAndExceptionConverter(inSingletonAndExceptionConverter),
        mNextObjId(0)
    {
    }

int64_t PythonBinaryStreamFromImplval::write(OBinaryStream& stream, ImplValContainer value)
    {
    auto hash = value.hash();
    auto it = mIdMapping.find(hash);

    if (it != mIdMapping.end())
        return it->second;

    int64_t objId = allocateId();
    mIdMapping[value.hash()] = objId;

    if (PythonBinaryStreamCommon::isUnconvertibleValueTuple(value))
        {
        stream << objId;
        stream << PythonBinaryStreamCommon::CODE_UNCONVERTIBLE;
        auto modulePath = *value.tupleGetItem(0);
        if (modulePath.type().isTuple())
            {
            stream << (bool)true;
            stream << (int32_t)modulePath.type().getTuple().types().size();
            for (long k = 0; k < modulePath.type().getTuple().types().size(); k++)
                {
                auto pathElt = *modulePath.tupleGetItem(k);
                lassert(pathElt.type().isString());
                stream << pathElt.cast<String>().stdString();
                }
            }
        else
            {
            lassert(modulePath.type().isNothing());
            stream << (bool)false;
            }

        return objId;
        }

    Nullable<ImplValContainer> primitive = mConstantConverter->unwrapPrimitive(value);
    if (value.type().isString())
        primitive = value;

    if (primitive)
        {
        @match Type(primitive->type())
            -| String() ->> {
                stream << objId;
                stream << PythonBinaryStreamCommon::CODE_STR;
                stream << primitive->cast<String>().stdString();
                }
            -| Integer(sz, isSigned) ->> {
                if (sz == 64 && isSigned)
                    {
                    stream << objId;
                    stream << PythonBinaryStreamCommon::CODE_INT;
                    stream << primitive->cast<int64_t>();
                    }
                    else
                if (sz == 1 && !isSigned)
                    {
                    stream << objId;
                    stream << PythonBinaryStreamCommon::CODE_BOOL;
                    stream << primitive->cast<bool>();
                    }
                }
            -| Float(bits) ->> {
                if (bits == 64)
                    {
                    stream << objId;
                    stream << PythonBinaryStreamCommon::CODE_FLOAT;
                    stream << primitive->cast<float>();
                    }
                }
            -| Nothing() ->> {
                stream << PythonBinaryStreamCommon::CODE_NONE;
                }
            -| Vector() ->> {
                stream << objId;
                stream << PythonBinaryStreamCommon::CODE_STR;

                VectorRecord vec = primitive->cast<VectorRecord>();
                if (vec.size() && vec.isEmptyOrVectorOfUint8())
                    {
                    stream << (int32_t)vec.size();

                    int64_t bytesWritten = 0;

                    //this is a string
                    bool allLoaded = vec.visitAnyLoadedValues(
                        &*mVDM, [&](ForaValueArray* array, IntegerSequence subsequence) {
                            lassert(array->isHomogenousPod() && array->homogenousStride() == 1);
                            uint8_t* data = array->offsetFor(0);

                            if (subsequence.stride() != 1)
                                {
                                for (long k = 0; k < subsequence.size();k++)
                                    stream << data[subsequence.offsetForIndex(k)];
                                }
                            else
                                stream.write(subsequence.size(), data + subsequence.offset());

                            bytesWritten += subsequence.size();
                            }, 
                        IntegerSequence(vec.size())
                        );

                    if (allLoaded)
                        lassert(bytesWritten == vec.size());
                    else
                        lassert(bytesWritten != vec.size());

                    lassert_dump(allLoaded, "we should be keeping track of pages we needed to read from!");
                    }
                else
                    {
                    lassert(vec.size() == 0);
                    stream << (int32_t)0;
                    }
                }
            -| _ ->> {
                lassert_dump(false, "invalid constant of type " << prettyPrintString(primitive->type()));
                }

        return objId;
        }

    auto singletonName = mSingletonAndExceptionConverter->convertInstanceToSingletonName(value);
    if (singletonName)
        {
        stream << objId;
        stream << PythonBinaryStreamCommon::CODE_NAMED_SINGLETON;
        stream << *singletonName;
        return objId;
        }

    ImplValContainer exceptionArgs;
    bool isPyAbort;
    auto exceptionName = mSingletonAndExceptionConverter->convertExceptionInstance(value, exceptionArgs, isPyAbort);
    if (exceptionName)
        {
        int64_t argsId = write(stream, *exceptionArgs);

        stream << objId;

        if (isPyAbort)
            stream << PythonBinaryStreamCommon::CODE_PY_ABORT_EXCEPTION;
        else
            stream << PythonBinaryStreamCommon::CODE_BUILTIN_EXCEPTION_INSTANCE;
        
        stream << *exceptionName;
        stream << argsId;

        return objId;
        }

    auto tupleContents = mTupleConverter->invertTuple(value);
    if (tupleContents)
        {
        std::vector<int64_t> contentsIds;

        for (auto elt: *tupleContents)
            contentsIds.push_back(write(stream, elt));

        stream << objId;
        stream << PythonBinaryStreamCommon::CODE_TUPLE;
        stream << (int64_t)contentsIds.size();
        for (auto id: contentsIds)
            stream << id;

        return objId;
        }

    auto dictContents = mDictConverter->invertDict(value);
    if (dictContents)
        {
        std::vector<int64_t> keyIds;
        std::vector<int64_t> valueIds;

        for (auto elt: dictContents->first)
            keyIds.push_back(write(stream, ImplValContainer(elt)));
        for (auto elt: dictContents->second)
            valueIds.push_back(write(stream, elt));

        stream << objId;
        stream << PythonBinaryStreamCommon::CODE_DICT;
        stream << (int64_t)keyIds.size();
        for (auto id: keyIds)
            stream << id;
        stream << (int64_t)valueIds.size();
        for (auto id: valueIds)
            stream << id;

        return objId;
        }
    

    auto listContents = mListConverter->invertList(value);
    if (listContents)
        {
        lassert(listContents.type()->isVector());

        VectorRecord vec = listContents->cast<VectorRecord>();

        if (vec.size() == 0)
            {
            stream << objId;
            stream << PythonBinaryStreamCommon::CODE_LIST;
            stream << (int64_t)0;
            return objId;
            }

        if (vec.jor().size() == 1 && vec.jor()[0].type() && vec.jor()[0].type()->isDirectlySerializable())
            {
            //this is homogenous data that we can just pack directly into tuples of floats, ints, etc.
            }

        std::vector<int64_t> objectIds;

        bool allLoaded = vec.visitAnyLoadedValues(
            &*mVDM, [&](ForaValueArray* array, IntegerSequence subsequence) {
                for (long k = 0; k < subsequence.size();k++)
                    objectIds.push_back(write(stream, (array)[subsequence.offsetForIndex(k)]));
                },
            IntegerSequence(vec.size())
            );

        stream << objId;
        stream << PythonBinaryStreamCommon::CODE_LIST;
        stream << (int64_t)objectIds.size();
        for (auto i: objectIds)
            stream << i;
        return objId;
        }

    if (value.type().isObject())
        {
        ImplValContainer cls = simulateApply
        }

    lassert_dump(false, "didn't know what to do with " << prettyPrintString(value));
    }

int64_t PythonBinaryStreamFromImplval::allocateId()
    {
    return mNextObjId++;
    }


}
